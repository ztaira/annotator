Prompt: Write a Python function to find the greatest common divisor (GCD) of two numbers.
Response:
```python
def gcd(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a
```

Prompt: Write a Python function to calculate the Fibonacci sequence up to a given number.
Response:
```python
def fibonacci(n: int) -> list:
    sequence = [0, 1]
    while sequence[-1] + sequence[-2] <= n:
        sequence.append(sequence[-1] + sequence[-2])
    return sequence
```

Prompt: Write a Python function to reverse a string.
Response:
```python
def reverse_string(s: str) -> str:
    return s[::-1]
```

Prompt: Write a Python function to flatten a nested list.
Response:
```python
def flatten_list(nested_list: list) -> list:
    flat_list = []
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    return flat_list
```

Prompt: Write a Python function to find the maximum depth of a binary tree.
Response:
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def max_depth(root: TreeNode) -> int:
    if not root:
        return 0
    left_depth = max_depth(root.left)
    right_depth = max_depth(root.right)
    return max(left_depth, right_depth) + 1
```

Prompt: Write a Python function to merge two dictionaries.
Response:
```python
def merge_dicts(dict1: dict, dict2: dict) -> dict:
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict
```
